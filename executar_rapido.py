#!/usr/bin/env python3
"""
Script de Execu√ß√£o R√°pida - CNPJ para WordPress
Executa todo o processo com configura√ß√µes padr√£o

Autor: Bruno Qualhato
Data: 23 de junho de 2025
"""

import os
import sys
from pathlib import Path

def main():
    """Execu√ß√£o r√°pida com menu simples"""
    print("üöÄ CNPJ PARA WORDPRESS - EXECU√á√ÉO AUTOM√ÅTICA")
    print("=" * 50)
    
    # Verificar se est√° no diret√≥rio correto
    base_dir = Path.cwd()
    if not (base_dir / 'processo_completo.py').exists():
        print("‚ùå Erro: Execute este script no diret√≥rio do projeto")
        print("Arquivos necess√°rios n√£o encontrados!")
        return
    
    print("Escolha uma op√ß√£o:")
    print("1) üß™ TESTE R√ÅPIDO (poucos dados, ~10 minutos)")
    print("2) üöÄ PROCESSO COMPLETO (todos os dados, v√°rias horas)")
    print("3) üìä Apenas gerar CSVs (usar dados j√° baixados)")
    print("4) üßπ Limpar e recome√ßar do zero")
    print("0) ‚ùå Sair")
    
    try:
        opcao = input("\nDigite sua op√ß√£o (0-4): ").strip()
        
        if opcao == "0":
            print("Saindo...")
            return
        
        elif opcao == "1":
            print("\nüß™ Iniciando TESTE R√ÅPIDO...")
            print("- Download de poucos arquivos")
            print("- Processamento de SP, RJ, MG apenas")
            print("- Tempo estimado: 10-30 minutos")
            
            confirma = input("\nContinuar? (s/n): ").lower().strip()
            if confirma in ['s', 'sim', 'y', 'yes']:
                os.system(f"{sys.executable} processo_completo.py --teste")
            
        elif opcao == "2":
            print("\nüöÄ Iniciando PROCESSO COMPLETO...")
            print("- Download de TODOS os dados (~10GB)")
            print("- Processamento de TODOS os estados")
            print("- Tempo estimado: 3-8 horas")
            print("\n‚ö†Ô∏è  ATEN√á√ÉO: Certifique-se de ter:")
            print("- Conex√£o est√°vel com a internet")
            print("- Pelo menos 50GB de espa√ßo livre")
            print("- Tempo dispon√≠vel (processo longo)")
            
            confirma = input("\nContinuar mesmo assim? (s/n): ").lower().strip()
            if confirma in ['s', 'sim', 'y', 'yes']:
                os.system(f"{sys.executable} processo_completo.py")
            
        elif opcao == "3":
            print("\nüìä Gerando CSVs com dados existentes...")
            
            # Verificar se existe banco
            banco_completo = base_dir / 'cnpj_dados.db'
            banco_teste = base_dir / 'cnpj_teste.db'
            
            if banco_completo.exists():
                print("‚úÖ Banco completo encontrado")
                os.system(f"{sys.executable} gerar_csv_estados.py --db cnpj_dados.db")
            elif banco_teste.exists():
                print("‚úÖ Banco de teste encontrado")
                estados = input("Estados para processar (ex: SP RJ MG) ou ENTER para todos: ").strip()
                if estados:
                    os.system(f"{sys.executable} gerar_csv_estados.py --db cnpj_teste.db --estados {estados}")
                else:
                    os.system(f"{sys.executable} gerar_csv_estados.py --db cnpj_teste.db")
            else:
                print("‚ùå Nenhum banco de dados encontrado!")
                print("Execute primeiro a op√ß√£o 1 ou 2 para baixar os dados")
        
        elif opcao == "4":
            print("\nüßπ LIMPEZA E REIN√çCIO...")
            print("Isso ir√° apagar:")
            print("- Todos os arquivos baixados")
            print("- Bancos de dados")
            print("- CSVs gerados")
            
            confirma = input("\nTem certeza? (s/n): ").lower().strip()
            if confirma in ['s', 'sim', 'y', 'yes']:
                # Limpar arquivos
                import shutil
                
                dirs_para_limpar = ['dados_cnpj', 'dados_teste', 'csv_estados']
                arquivos_para_limpar = ['cnpj_dados.db', 'cnpj_teste.db', '*.log']
                
                for dir_name in dirs_para_limpar:
                    dir_path = base_dir / dir_name
                    if dir_path.exists():
                        print(f"Removendo {dir_name}...")
                        shutil.rmtree(dir_path)
                
                import glob
                for pattern in arquivos_para_limpar:
                    for arquivo in glob.glob(pattern):
                        print(f"Removendo {arquivo}...")
                        os.remove(arquivo)
                
                print("‚úÖ Limpeza conclu√≠da!")
                
                # Perguntar se quer recome√ßar
                recomecar = input("\nRecome√ßar processo? (1=teste, 2=completo, n=n√£o): ").strip()
                if recomecar == "1":
                    os.system(f"{sys.executable} processo_completo.py --teste --limpar")
                elif recomecar == "2":
                    os.system(f"{sys.executable} processo_completo.py --limpar")
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
    
    except KeyboardInterrupt:
        print("\n\n‚ùå Processo interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")

    print("\n" + "="*50)
    print("Processo finalizado!")


if __name__ == "__main__":
    main()
